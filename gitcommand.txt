### git command ###

# git 初期化
git init

# リモートリポジトリ取得
git clone <リポジトリのURLorSSH>

# clone等でエラーになったとき
# 下記でSSH用の秘密鍵・公開鍵を作成
# 公開鍵(初期だと「id_rsa.pub」の中身をgitのssh keyに登録する)
ssh-keygen -t rsa -b 4096 -C "登録メールアドレス"

# ステージ追加
git add　<ファイル名>
git add .

# リポジトリ登録
git commit
# メッセージ付き
git commit -m 'メッセージ'
# エディター起動らしい
git commit -v

# ワークツリーとステージ、ステージとリポジトリの変更ファイル表示
git status
# ワークツリーとステージの差分
git diff
# ステージとリポジトリの差分
git diff --staged

# 変更履歴を確認
git log
# 一行で表示
git log --oneline
# ファイルの変更差分を表示
git log -p index.html
# 表示するコミット数を制限する（最近から）
git log -n <コミット数>
# 一行でかつどのブランチがどのコミットを見ているか表示
git log --oneline --decorate

# ファイルを削除
git rm <ファイル名>
# ディレクトリ削除
git rm -r <ディレクトリ名>
# ファイルは残すけどgitから削除
git rm --cached <ファイル名>

# ファイルを移動（ファイル名の変更）
# 内部的にはrm <旧ファイル名> add <新ファイル名>と同じ
git mv <旧ファイル名> <新ファイル名>

# リモートリポジトリを新規追加
# リモート名は基本originにする
# これはは慣用句のようなもの、cloneしたとき自動で割り当てられる
# リモートリポジトリは複数登録することができるリモート名を変えればOK
git remote add <リモート名> <URL or SSH>
git remote add origin https://github.com/haru0515/git.git
git remote add bkup git@github.com:haru0515/bkup.git

# リモートを間違えた場合
git remote rm <リモート名>
# 現在のリモート確認
git remote -v

# リモートリポジトリにアップ（プッシュ）
git push <リモート名> <ブランチ名>
git push origin master
# -u をつけると次回から git pushだけで origin masterをつけた状態と同じになる
git push -u origin master

# コマンドにエイリアスをつける
# commit を ci と打てば使えるようにする。以下省略
# configは設定　--globalはPC全体に反映させる（つけなきゃそのプロジェクトだけ）
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout

# バージョン管理したくないものの設定
# .gitignoreにファイルを記載する
# #から始まる行はコメント
# 指定したファイルを除外
index.html
# ルートディレクトリを指定
/root.html
/dir/test.html
# ディレクトリ以下を除外
dir/
# /以外の文字列にマッチ「*」
# 以下だと一つ階層を潜ったところにある.cssお除外
/*/*.css

# ファイルの変更を取り消す（ステージの情報に戻す）
# --を入れると明示的にブランチではないという指定になる
git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>
# 全変更を取り消す
git checkout -- .
# ブランチを切り替える
git checkout <ブランチ名>
# ブランチを新規作成して切り替える
git checkout -b <ブランチ名>

# ステージの情報を最新リポジトリに戻す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>
git reset HEAD .

# 直前のコミットをやり直す
# pushしたあとはだめだよ
git commit --amend

# リモートを表示する
git remote
# 対応するURLを表示
git remote -v
# リモートの詳細情報を表示する
git remote show <リモート名>

# リモートから情報を取得する fetch編
# ローカルリポジトリ（リモートリポジトリ用のところ）に情報を格納
# originの場合だと remotes/origin/master に格納される
git fetch <リモート名>
git fetch origin

# ブランチの情報をワークツリーに取り込む
git merge <リモート名/ブランチ名>
git merge origin/master

# Fast Foward ブランチが枝分かれせず、そのコミットの先にある場合のマージ
# git pullとかで自動で起きる

# Auto Merge 枝分かれしているものをマージ（新しいコミットファイルができる）変更履歴の統合
git merge <ブランチ名>

# コンフリクト

# リモートから情報を取得する pull編
# イメージはfetchとmergeを同時に行っている
# ただしmergeは現在のブランチにされることに注意
git pull <リモート名> <ブランチ名>
git pull origin master

# リモートの変更
git remote rename <旧リモート名> <新リモート名>
git remote rename bkup bak

# リモートの削除
git remote rm <リモート名>
git remote rm bak

# ブランチを新規追加する
# ブランチを作るだけで切り替わらないよ！
# HEADは現在参照しているブランチのこと
git barnch <ブランチ名>
git branch feature
# ブランチをすべて表示(リモートブランチも含め)
git branch -a
# ブランチ名を変更（mはmove）
git branch -m <ブランチ名>
# ブランチを削除(masterにマージされていない変更が残っている場合、削除しない)
git branch -d <ブランチ名>
# ブランチを強制削除
git branch -D <ブランチ名>
